Lab Cycle - 1
#question-1
USE LAB;

create table employees(
	ssn int auto_increment,
    fname char(100) NOT NULL,
    lname char(100),
    address varchar(200),
    sex char(50),
    salary varchar(100),
    SuperSSN int,
    DNo int references department(DNo),
    PRIMARY KEY (ssn)
);

create table department(
	DNo int auto_increment primary key,
    DName varchar(100),
    MgrSSN int,
    MgrStartDate date,
	FOREIGN KEY (MgrSSN) REFERENCES employees(ssn)
);

create table DLocation(
    DLoc int auto_increment primary key,
	DNo int,
    foreign key (DNo) references department(DNo)
);

create table project(
	PNo int auto_increment primary key,
    PName varchar(100),
    PLocation varchar(100),
    DNo int,
    foreign key (DNo) references department(DNo)
);

create table works_on(
	SSN int,
    foreign key (SSN) references employees(ssn),
    PNo int, 
    foreign key (PNo) references project(PNo),
    hours int CHECK (hours>=5)
);

ALTER TABLE employees
ADD COLUMN Age Int;

DROP TABLE project; 

TRUNCATE TABLE works_on;

DESC department; 


#question-2
INSERT INTO employees (fname, lname, address, sex, salary, SuperSSN,Age)
VALUES ('Abdul Hakkeam', 'P A', 'CUSAT', 'Male', 30000, 10,20);

select * from employees;

UPDATE employees
SET salary = 25000
WHERE ssn = 9;

DELETE FROM employees where ssn=2;


#question-3
CREATE USER 'user1'@'localhost' IDENTIFIED BY 'password';

GRANT SELECT ON employees TO'user1'@'localhost';

REVOKE SELECT ON employees FROM 'user1'@'localhost';


#question-4
select fname from employees where fname like "%a_";

SELECT sex, COUNT(ssn) AS count
FROM employees
GROUP BY sex;

SELECT AVG(salary) AS AverageSalary FROM employees where sex="Female";

SELECT SUM(salary) AS TotalSalary FROM employees where sex="Male";

SELECT MAX(salary),MIN(salary) FROM employees where sex="Male";

SELECT * FROM employees where salary IN (25000,50000);

SELECT lname FROM employees where salary=30000 or salary=40000 or salary=50000;


#question-5
use lab;

UPDATE employees SET salary = salary+ 0.25*salary WHERE DNo IN (SELECT DNo FROM project WHERE PLocation = "Chennai");  

select fname,Dloc,hours from employees,dlocation,works_on where dlocation.DNo = employees.DNo and works_on.SSN = employees.ssn and hours > 5;

SELECT project.PName,project.PLocation FROM project LEFT JOIN works_on ON works_on.hours IS NOT NULL;

SELECT works_on.hours FROM works_on RIGHT JOIN project ON project.PLocation IS NOT NULL;

select works_on.PNo,employees.fname,dlocation.Dloc,employees.DNo,employees.ssn,works_on.hours from employees,works_on,dlocation
where works_on.SSN = employees.ssn and
    dlocation.DNo = employees.DNo ;




#cycle-2

#question-1
CREATE VIEW VW_emp AS
SELECT * FROM employees;

CREATE VIEW VW_SSN AS
SELECT SuperSSN,Dno FROM employees WHERE sex="Female";

UPDATE VW_emp SET address="Chennai"
WHERE ssn=10;
SELECT * FROM VW_emp;

DROP VIEW VW_emp;


#question-2

SQL> set serveroutput on
SQL> edit@factorial.sql
create or replace function get_factorial(N int)
return varchar
is
fact int := 1;
begin
for i in 1..N loop
fact := fact*i;
end loop;
return ’Factorial is ’ || fact ;
end;
/
select get_factorial(5) from dual;
SQL> @XEfactorial.sql


SQL> set serveroutput on
SQL> edit@max.sql
create or replace function maximum(n1 int, n2 int)
return varchar
is
m int := 0;
begin
if n1>n2 then
m := n1;
else
m := n2;
end if;
return ’Maximum is ’ ||m;
end;
/
select maximum(4,9) from dual;
SQL> @XEmax.sql


SQL> set serveroutput on
SQL> edit@Prime.sql
declare
n number := &n;
i number := 1;
flag number := 0;
begin
while i < n/2
loop
i := i+1;
if (mod(n,i)= 0) then
flag := 1;
end if;
end loop;
if (flag = 1) then
dbms_output.put_line(’Not Prime’);
else
dbms_output.put_line(’Prime’);
end if;
end;
/
SQL> @XEprime.sql



SQL> set serveroutput on
SQL> edit@numbers.sql
DECLARE
i INTEGER := 1;
BEGIN
WHILE i <= 10 LOOP
DBMS_OUTPUT.PUT_LINE(i);
i := i+1;
END LOOP;
END;
/
SQL> @XEnumbers.sql


#question-3

SQL> declare cursor employee_cur is
2 select SSN,Salary from Employee where DNO = ’D001’
3 for update;
4 incr_sal number;
5 begin
6 for employee_rec in employee_cur loop
7 if employee_rec.Salary < 50000 then
8 incr_sal := .15;
9 else
10 incr_sal := .10;
11 end if;
12 update Employee set Salary = Salary + Salary * incr_sal where current of
employee_cur;
13 end loop;
14 end;
15 /
PL/SQL procedure successfully completed.


SQL> declare cursor department_cur is
2 select DNO,Dname from Department;
3 data1 Department.DNO%type;
4 data2 Department.Dname%type;
5 begin
6 open department_cur;
7 loop
8 fetch department_cur into data1,data2;
9 exit when department_cur%notfound;
10 dbms_output.put_line(’DNO : ’||data1||’::Dname : ’||data2);
11 end loop;
12 close department_cur;
13 end;
14 /



#question-3
CREATE OR REPLACE TRIGGER display_sal_changes
BEFORE DELETE OR INSERT OR UPDATE ON employee
FOR EACH ROW WHEN (NEW.ID > 0)
DECLARE
sal_diff number;
BEGIN
sal_diff := :NEW.salary - :old.salary;
dbms_output.put line( ’Old salary: ’|| :OLD.salary);
dbms_output.put_line( ’New salary: ’|| :NEW. salary);
dbms_output.put_line(’Salary difference: ’|| sal_diff);
END;
/
update employeee set salary = 50000 where ssn = ’e1001’;


CREATE OR REPLACE TRIGGER display_hour_updates
BEFORE DELETE OR INSERT OR UPDATE ON works_on
FOR EACH ROW
WHEN (NEW.HOURS > 0)
DECLARE
hour_diff number;
BEGIN
hour_diff := :NEW.HOURS - :OLD.HOURS;
dbms_output.put_line(’Old HOURS: ’ || :OLD.HOURS);
dbms_output.put_line(’New HOURS: ’ || :NEW.HOURS);
dbms_output.put_line(’HOUR difference: ’ || hour_diff);
END;
/
update works_on set hours = 20 where ssn = ’e1001’;



#question-4

mysql> start transaction;
Query OK, 0 rows affected (0.01 sec)
mysql> savepoint save1;
Query OK, 0 rows affected (0.00 sec)
mysql> insert into Employee values("e1006","Anju","Rajesh","Sobha Marina,Kochi","Female",
80000,"SP1004","D005",29);
Query OK, 1 row affected (0.01 sec)
mysql> savepoint save2;
Query OK, 0 rows affected (0.00 sec)


mysql> rollback to save1;
Query OK, 0 rows affected (0.01 sec)



mysql> commit;
Query OK, 0 rows affected (0.00 sec)



